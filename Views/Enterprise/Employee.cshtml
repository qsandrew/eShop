<style>
    .card {
        border: 1px solid #32c5d2;
    }

    .card .title {
        font-size: 18px;
        padding: 10px;
        background-color: #32c5d2;
        color: white;
    }

    .card .body {
        padding: 15px;
    }

    table {
        color: #333;
        width: 100%;
        border-collapse: collapse;
    }

    table thead {
        background-color: #f1f4f7;
    }

    table th,
    table td {
        padding: 5px;
        border: 1px solid #e7ecf1;
    }

    table td:nth-child(1) {
        text-align: center;
    }

    table tbody tr {
        cursor: pointer;
    }

    table tbody tr:hover {
        background-color: #f3f4f6;
    }

    table tbody td {
        text-align: center;

    }

    /* .vdp-datepicker__calendar {
        right: 0;
        color:black;
    } */
</style>

<!-- Global styles -->
<style>
    .btn {
        padding: 5px;
        border: 1px solid transparent;
    }

    button:hover {
        cursor: pointer;
    }

    input[type=text],
    select {
        box-sizing: border-box;
        width: 100%;
        padding: 5px;
        border: 1px solid #ccc;
    }
</style>

<!-- Global Color -->
<style>
    .green {
        color: #FFF;
        background-color: #32c5d2;
        border-color: #32c5d2;
    }

    .red {
        color: #FFF;
        background-color: #ed6b75;
        border-color: #ed6b75;
    }

    .yellow {
        color: #fff;
        background-color: #F1C40F;
        background-color: #F1C40F;
    }

    .green:hover {
        background-color: #26a1ab;
        border-color: #26a1ab;

    }

    .outBlack {
        border: 1px solid #2f353b;
        color: #2f353b;
        background: transparent;
    }

    .outBlack:hover {
        border-color: #2f353b;
        color: #fff;
        background: #2f353b;
    }

    .outPurple {
        border-color: #8E44AD;
        color: #8E44AD;
        background: transparent;
    }

    .outPurple:hover {
        border-color: #8E44AD;
        color: #fff;
        background: #8E44AD;
    }

    .outBlue {
        color: #3598dc;
        background-color: transparent;
        border-color: #3598dc;
    }

    .outBlue:hover {
        color: #FFF;
        background-color: #3598dc;
        border-color: #3598dc;
    }

    .outRed {
        color: #e43a45;
        background-color: transparent;
        border-color: #e43a45;
    }

    .outRed:hover {
        color: #fff;
        background-color: #e43a45;
        border-color: #e43a45;
    }
</style>


<style>
    .modal {
        display: block;
        position: absolute;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);

    }
    .loading{
        text-align: center; top: 50%; position: relative; transform: translateY(-50%);
    }
   

    .modal-content {
        box-sizing: border-box;
        background-color: #fefefe;
        position: relative;
        margin: auto;
        top: 50%;
        transform: translateY(-50%);

        border: 1px solid #888;
        width: 400px;
    }

    .modal-content h3 {
        text-align: center;
        padding-bottom: 10px;
        color: #333;
        border-bottom: 1px solid #EFEFEF;
    }

    hr {
        border: 1px solid #EFEFEF;

    }
</style>

<!-- MaterialDesign Style -->
<style>
    .mtForm {
        margin: 0 40px;
    }

    .mtForm label {
        color: #36c6d3;
        display: block;
        margin-bottom: 10px;
    }

    .mtForm input,
    .mtForm select,
    .mtForm textarea {
        border: 0;
        border-bottom: 1px solid #c2cad8;
        outline: none;
        width: 100%;
        padding-left: 0;
    }

    .mtForm input:focus,
    .mtForm select:focus,
    .mtForm textarea:focus {
        border-bottom: 1px solid #36c6d3;
    }
</style>

<div id="app" class="card">


    <div class="modal" v-show="showEmp">
        <div class="modal-content">
            <h3>Добавить сотрудника</h3>
            <form id="formEmployee" class="mtForm">

                <label>Фамилия
                    <input type="text" v-model="emp.surName" required placeholder="Введите фамилию">
                </label>
                <label>Имя
                    <input type="text" v-model="emp.name" required placeholder="Введите имя">
                </label>
                <label>Отчество
                    <input type="text" v-model="emp.middleName" placeholder="Введите отчество (необ.)">
                </label>
                <label>ИИН
                    <input type="text" v-model="emp.iin" required pattern="[0-9]{12}" maxlength="12"
                        placeholder="Введите ИИН (12 цифр)">
                </label>
                <label>Должность
                    <select v-model="emp.positionId">
                        <option disabled>Выберите должность</option>
                        <option v-for="p in positions" v-bind:value="p.id">{{p.name}}</option>
                    </select>
                </label>

                <label>Работает с

                    <input v-model="emp.fromDate" type="date" required placeholder="Введите дату">
                </label>
                <!-- <vuejs-datepicker  v-model="emp.fromDate"></vuejs-datepicker> -->
                <label>Статус
                    <select v-model.number=emp.statusWork>
                        <option value="1">Работает</option>
                        <option value="2">Отпуск</option>
                        <option value="3">Болеет</option>
                        <option value="4">Уволен</option>
                    </select>
                </label>
            </form>
            <hr />
            <div style="margin: 10px; text-align: right;">
                <button class="btn outBlack" v-on:click="closeWinEmp()">Отмена</button>
                <button class="btn green" v-on:click="saveEmployee()">Сохранить</button>
            </div>

        </div>

    </div>


    <div class="modal" v-show="isLoading">
        <h3 class="loading">Загрузка...</h3>
    </div>

    <div class="title"><i class="fa fa-comments"></i> Сотрудники</div>
    <div class="body">
        <button style="display: none;" style="margin-bottom: 10px;" class="btn green" v-on:click="showAddEmp()">
            Добавить
            <i class="fa fa-plus"></i>
        </button>
        <form id="formTable" action="javascript:;">
            <table>
                <thead>
                    <tr>
                        <th style="width: 50px;">#</th>
                        <th>ФИО</th>
                        <th style="width: 150px;">ИИН</th>
                        <th style="width: 200px;">Должность</th>
                        <th style="width: 100px;">Работает с</th>
                        <th style="width: 150px;">Статус</th>
                        <th style="width: 100px;">Действия</th>
                    </tr>
                    <tr>
                        <th></th>
                        <th><input v-on:keyup.enter="reloadEmployee()" v-model="empFilter.fio" type="text"></th>
                        <th><input v-on:keyup.enter="reloadEmployee()" v-model="empFilter.iin" type="text"></th>
                        <th>
                            <select v-on:change="reloadEmployee()" v-model.number="empFilter.positionId">
                                <option value="0"></option>
                                <option v-for="p in positions" v-bind:value="p.id">{{p.name}}</option>
                            </select>
                        </th>
                        <th></th>
                        <th>
                            <select v-on:change="reloadEmployee()" v-model.number="empFilter.status">
                                <option value="0" ></option>
                                <option value="1">Работает</option>
                                <option value="2">Отпуск</option>
                                <option value="3">Болеет</option>
                                <option value="4">Уволен</option>
                            </select>
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="(empl,ind) in employees">
                        <template v-if="empl.isEdit==false">
                            <td>{{ind+1}}</td>
                            <td>{{empl.fullName}}</td>
                            <td>{{empl.iin}}</td>
                            <td>{{empl.positionName}}</td>
                            <td>{{empl.fromDate}}</td>
                            <td> <span style="padding: 3px;"
                                    v-bind:class="setStatuslbl(empl.statusWork)">{{empl.statusName}}</span></td>
                            <td>
                                <button class="btn outPurple" type="button" v-on:click="editRow(empl)"><i class="fa fa-pencil"></i></button>
                                <button class="btn outBlack" type="button" v-on:click="deleteEmployee(empl)"><i class="fa fa-trash"></i></button>

                            </td>
                        </template>
                        <template v-else>
                            <td></td>
                            <td>
                                <input form="formTable" style="width: 32%;" type="text" v-model="emp.surName" required
                                    placeholder="Введите фамилию">
                                <input style="width: 32%;" type="text" v-model="emp.name" required
                                    placeholder="Введите имя">
                                <input style="width: 32%;" type="text" v-model="emp.middleName"
                                    placeholder="Введите отчество (необ.)">
                            </td>
                            <td>
                                <input type="text" v-model="emp.iin" required pattern="[0-9]{12}" maxlength="12"
                                    placeholder="Ввод ИИН (12 цифр)">
                            </td>
                            <td>
                                <select required v-model="emp.positionId">
                                    <option disabled>Выберите должность</option>
                                    <option v-for="p in positions" v-bind:value="p.id">{{p.name}}</option>
                                </select>
                            </td>
                            <td>
                                <input v-model="emp.fromDate" type="date" required placeholder="Введите дату">
                            </td>
                            <td>
                                <select v-model.number=emp.statusWork>
                                    <option value="1">Работает</option>
                                    <option value="2">Отпуск</option>
                                    <option value="3">Болеет</option>
                                    <option value="4">Уволен</option>
                                </select>
                            </td>
                            <td>
                                <button class="btn outRed" type="button" v-on:click="deleteRow(empl)"><i
                                        class="fa fa-eraser"></i></button>
                                <button class="btn outBlue" v-on:click="saveEmployee()"><i
                                        class="fa fa-check"></i></button>
                            </td>
                        </template>
                    </tr>
                </tbody>
            </table>
        </form>
        <div style="margin-top: 10px; text-align: right;">
            <button class="btn outBlue" v-if="btn.shAdd" v-on:click="addRow();"><i class="fa fa-plus"></i> Добавить</button>
        </div>

    </div>
</div>

@section Scripts{


<script>
    const app = new Vue({
        el: '#app',
        data: {
            isLoading:false,
            showEmp: false,
            btn:{
               shAdd:true, 
            },
            employees: [],
            positions: [],
            empFilter:{
                fio:'',
                iin:'',
                positionId:0,
                status:0
            },
            emp: {
                id:0,
                surName: '',
                name: '',
                middleName: '',
                iin: '',
                positionId: 1,
                fromDate: '',
                statusWork: 1,
                isEdit: true
            }
        },

        mounted() {
            this.getEmployees();
            this.getPositions();
        },

        methods: {
            reloadEmployee(){
                this.getEmployees();
                this.emp = {id:0, surName: '', name: '', middleName: '', iin: '', positionId: 1, fromDate: '', statusWork: 1, isEdit: true }
                this.btn.shAdd=true;
            },
            deleteEmployee(empl){
                let isDel = confirm("Удалить запись?");
                if(isDel){
                    this.emp = empl;
                    const [day, month, year] = this.emp.fromDate.split(".");
                    this.emp.fromDate=year+'-'+month+'-'+day;
                    axios.post('/Enterprise/DeleteEmployee', this.emp)
                    .then(resp=>{
                        this.reloadEmployee();
                        alert(resp.data);
                    })
                    .catch(error => {console.log(error);});  
                }
            },
            editRow(empl){
                this.btn.shAdd = false;
                empl.isEdit=true;
                this.emp = Object.assign({}, empl);
                const [day, month, year] = this.emp.fromDate.split(".");
                 this.emp.fromDate=year+'-'+month+'-'+day;
                
            },
            addRow() {
                this.emp = {id:0, surName: '', name: '', middleName: '', iin: '', positionId: 1, fromDate: '', statusWork: 1, isEdit: true };
                this.employees.push(this.emp);
                this.btn.shAdd=false;
            },
            deleteRow(empl) {
                this.btn.shAdd = true;
                if(empl.id!=0){
                    empl.isEdit=false;
                    return;
                }
                this.emp = {id:0, surName: '', name: '', middleName: '', iin: '', positionId: 1, fromDate: '', statusWork: 1, isEdit: true }
                this.employees.pop();
            },

            setStatuslbl(status) {
                let color = '';
                switch (status) {
                    case 1: color = 'green'; break;
                    case 2:
                    case 3: color = 'yellow'; break;
                    case 4: color = 'red'; break;
                }
                return color;
            },
            getEmployees: async function () {
                let resp = await axios.post('/Enterprise/GetEmployees', this.empFilter);
                this.employees = resp.data;
            },

            showAddEmp: function () {
                this.showEmp = true;
            },

            checkIsInvalid: function () {
                let arrInput = formTable.querySelectorAll("[required], [pattern]");
                let isInvalid = false;
                for (let inp of arrInput) {
                    if (inp.checkValidity()) {
                        inp.style.borderBottom = "1px solid #36c6d3";
                    } else {
                        inp.style.borderBottom = "1px solid red";
                        isInvalid = true;
                    }
                }
                return isInvalid;
            },
            saveEmployee: function () {
                if (this.checkIsInvalid()) {
                    return;
                }
                
                axios.post('/Enterprise/SaveEmployee', this.emp)
                    .then(resp=>{
                        this.reloadEmployee();
                        alert(resp.data);
                    })
                    .catch(error => {console.log(error);});
            },

            closeWinEmp: function () {
                formEmployee.reset();
                this.showEmp = false;
            },
            getPositions: async function () {
                let resp = await axios.get('/Enterprise/GetPositions');
                this.positions = resp.data;
                this.emp.positionId = this.positions[0].id
            },

        }

    })
</script>
}